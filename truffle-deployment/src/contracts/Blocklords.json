{
  "contractName": "Blocklords",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0x715018a6"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x8da5cb5b"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function",
      "signature": "0x8f32d59b"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function",
      "signature": "0xf2fde38b"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event",
      "signature": "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0"
    }
  ],
  "bytecode": "0x6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36103de806100cf6000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063715018a6146100675780638da5cb5b1461007e5780638f32d59b146100d5578063f2fde38b14610104575b600080fd5b34801561007357600080fd5b5061007c610147565b005b34801561008a57600080fd5b50610093610219565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100e157600080fd5b506100ea610242565b604051808215151515815260200191505060405180910390f35b34801561011057600080fd5b50610145600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610299565b005b61014f610242565b151561015a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6102a1610242565b15156102ac57600080fd5b6102b5816102b8565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156102f457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820c2e6ab0ea9a05f0de150095f8b69fd9748bad5ec2a700807f5d9b9d89dea97d40029",
  "deployedBytecode": "0x608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063715018a6146100675780638da5cb5b1461007e5780638f32d59b146100d5578063f2fde38b14610104575b600080fd5b34801561007357600080fd5b5061007c610147565b005b34801561008a57600080fd5b50610093610219565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100e157600080fd5b506100ea610242565b604051808215151515815260200191505060405180910390f35b34801561011057600080fd5b50610145600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610299565b005b61014f610242565b151561015a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b6102a1610242565b15156102ac57600080fd5b6102b5816102b8565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156102f457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820c2e6ab0ea9a05f0de150095f8b69fd9748bad5ec2a700807f5d9b9d89dea97d40029",
  "sourceMap": "51:38090:0:-;;;525:10:2;516:6;;:19;;;;;;;;;;;;;;;;;;583:6;;;;;;;;;;;550:40;;579:1;550:40;;;;;;;;;;;;51:38090:0;;;;;;",
  "deployedSourceMap": "51:38090:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1348:137:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1348:137:2;;;;;;660:77;;8:9:-1;5:2;;;30:1;27;20:12;5:2;660:77:2;;;;;;;;;;;;;;;;;;;;;;;;;;;980:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;980:90:2;;;;;;;;;;;;;;;;;;;;;;;;;;;1656:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1656:107:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;1348:137;864:9;:7;:9::i;:::-;856:18;;;;;;;;1446:1;1409:40;;1430:6;;;;;;;;;;;1409:40;;;;;;;;;;;;1476:1;1459:6;;:19;;;;;;;;;;;;;;;;;;1348:137::o;660:77::-;698:7;724:6;;;;;;;;;;;717:13;;660:77;:::o;980:90::-;1020:4;1057:6;;;;;;;;;;;1043:20;;:10;:20;;;1036:27;;980:90;:::o;1656:107::-;864:9;:7;:9::i;:::-;856:18;;;;;;;;1728:28;1747:8;1728:18;:28::i;:::-;1656:107;:::o;1907:183::-;2000:1;1980:22;;:8;:22;;;;1972:31;;;;;;;;2047:8;2018:38;;2039:6;;;;;;;;;;;2018:38;;;;;;;;;;;;2075:8;2066:6;;:17;;;;;;;;;;;;;;;;;;1907:183;:::o",
  "source": "pragma solidity ^0.4.23;\n\nimport \"./Ownable.sol\";\n\ncontract Blocklords is Ownable {\n\n/////////////////////////////////////   Constants    ////////////////////////////////////////////////\n\n  // Market Durations\n  uint constant HOURS_8       = 28800;      // 28_800 Seconds are 8 hours\n  uint constant HOURS_12      = 43200;     // 43_200 Seconds are 12 hours\n  uint constant HOURS_24      = 86400;     // 86_400 Seconds are 24 hours\n\n  // Battle Results\n  uint constant ATTACKER_WON  = 1;\n  uint constant ATTACKER_LOSE = 2;\n\n  // Battle Types\n  uint constant PVP= 1;       // Player Against Player at the Strongholds\n  uint constant PVC= 2;       // Player Against City\n  uint constant PVE= 3;       // Player Against NPC on the map\n\n  // Fee Key Constants\n  string constant HERO_CREATION_FEE         = \"HERO_CREATION_FEE\"; //= 500000000; //TRX in SUN, 1 TRX * 1000000\n  string constant REFERAL_FEE               = \"REFERAL_FEE\";// = 250000000;\n  string constant HOURS_8_FEE               = \"HOURS_8_FEE\";// =   50000000;\n  string constant HOURS_12_FEE              = \"HOURS_12_FEE\";// =  70000000;\n  string constant HOURS_24_FEE              = \"HOURS_24_FEE\";// = 88000000;\n  string constant PVC_FEE                   = \"PVC_FEE\";// = 200000000;\n  string constant PVE_FEE                   = \"PVE_FEE\";// = 50000000;\n  string constant PVP_FEE                   = \"PVP_FEE\";// = 100000000;\n  string constant PURCHASE_PERCENTS         = \"PURCHASE_PERCENTS\";// = 115;\n  string constant LORD_PERCENTS             = \"LORD_PERCENTS\";// = 10;\n  string constant SELLING_COFFER_PERCENTS   = \"SELLING_COFFER_PERCENTS\";  // 50\n  string constant PVC_COFFER_PERCENTS       = \"PVC_COFFER_PERCENTS\";  // 50\n  string constant COFFER_PAY_PERCENTS       = \"COFFER_PAY_PERCENTS\";  // 30\n  string constant COFFER_REMAINING_PERCENTS = \"COFFER_REMAINING_PERCENTS\";  // 70\n\n  string constant COFFER_INTERVAL_BLOCKS     = \"COFFER_INTERVAL_BLOCKS\";  // 150 000\n  string constant ITEM_DROP_INTERVAL_BLOCKS = \"ITEM_DROP_INTERVAL_BLOCKS\"; // 800\n\n  // Item Batch Type\n  uint constant STRONGHOLD_REWARD_BATCH = 0;\n\n// /////////////////////////////////////   Options    /////////////////////////////////////\n//   mapping ( string => uint ) options;\n\n//   function setOption(string key, uint value) public onlyOwner {\n//     options[key] = value;\n//   }\n\n//   function getOption(string key) public view returns (uint) {\n//     return options[key];\n//   }\n\n// /////////////////////////////////////   Coffers    /////////////////////////////////////\n\n//   uint coffersTotal = allCoffers();\n\n//   function getBalance() public view returns(uint) {\n//       return address(this).balance;\n//   }\n\n//   function withdraw(uint amount) public returns(bool) { //  withdraw  only to owner's address\n//       if (amount == 0)\n//            amount = getBalance();\n//       uint coffers = allCoffers();\n//       require(amount - coffers > 0, \"GENERALLY_NOT_ENOUGH_MONEY\");  // Umcomment this requirement if you want the amount stored in coffers to be not withdrawable\n//       address owner_ = owner();\n//       owner_.transfer(amount - coffers);\n//       return true;\n//   }\n\n//   function random(uint entropy, uint number) private view returns (uint8) {\n//        // NOTE: This random generator is not entirely safe and   could potentially compromise the game,\n//           return uint8(1 + uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, entropy)))%number);\n//      }\n\n//   function randomFromAddress(address entropy) private view returns (uint8) {\n//          return uint8(1 + uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, entropy)))%256);\n//    }\n\n// ///////////////////////////////////// HERO STRUCT ////////////////////////////////////////////////\n\n//     struct Hero{\n//         address OWNER;     // Wallet address of Player that owns Hero\n//         uint LEADERSHIP;   // Leadership Stat value\n//         uint INTELLIGENCE; // Intelligence Stat value\n//         uint STRENGTH;     // Strength Stat value\n//         uint SPEED;        // Speed Stat value\n//         uint DEFENSE;      // Defense Stat value\n//         uint CREATED_TIME;\n//     }\n\n//     mapping (uint => Hero) heroes;\n//     mapping (address => uint) playerHeroes;\n\n//     function getPlayerHeroId(address heroOwner) public view returns(uint) {\n//       if (heroOwner != 0x0000000000000000000000000000000000000000)\n//         return playerHeroes[heroOwner];\n//       return playerHeroes[msg.sender];\n//     }\n\n//     event HeroCreation(address creator, uint id);\n//     event HeroCreationWithReferalLink(address creator, uint id, address referer_address);\n\n//     function putHero(uint id, uint referer_id, address referer_address, uint[] heroStats, uint[] heroItems, uint8 v, bytes32[2] rs) public payable returns(bool){\n//       require(playerHeroes[msg.sender] == 0, \"PLAYER_ALREADY_HAVE_A_HERO\");\n//             require(id > 0, \"HERO_ID_MUST_BE_HIGHER\");\n//             //require(payments[id].PAYER == owner, \"Payer and owner do not match\");\n//             require(heroes[id].OWNER == 0x0000000000000000000000000000000000000000, \"HERO_MUST_NOT_BE_ON_BLOCKCHAIN\");\n//             require(msg.value == options[HERO_CREATION_FEE], \"HERO_CREATION_MUST_HAVE_CORRECT_ATTACHMENT\");\n//             require(msg.sender != owner(), \"GAME_ADMIN_CAN_NOT_PLAY_GAME\");\n\n//             if (referer_id > 0) {\n//                 require(heroes[referer_id].OWNER == referer_address, \"REFERER_NOT_EXISTS\");\n//                 require(referer_address.send(options[REFERAL_FEE]), \"REFERER_CAN_NOT_ACCEPT_YOUR_TRANSFERS\");\n//                 emit HeroCreationWithReferalLink(msg.sender, id, referer_address);\n//             }\n\n//             require(stronghold_rewards_batch[heroItems[0]] == 0, \"ITEM_IN_STRONGHOLD_REWARD_BATCH\");\n//             require(stronghold_rewards_batch[heroItems[1]] == 0, \"ITEM_IN_STRONGHOLD_REWARD_BATCH\");\n//             require(stronghold_rewards_batch[heroItems[2]] == 0, \"ITEM_IN_STRONGHOLD_REWARD_BATCH\");\n//             require(stronghold_rewards_batch[heroItems[3]] == 0, \"ITEM_IN_STRONGHOLD_REWARD_BATCH\");\n//             require(stronghold_rewards_batch[heroItems[4]] == 0, \"ITEM_IN_STRONGHOLD_REWARD_BATCH\");\n\n//             require(items[heroItems[0]].OWNER == owner(), \"ITEM_IS_NOT_IN_BLOCKCHAIN\");\n//             require(items[heroItems[0]].STAT_TYPE == 1, \"ITEM_TYPE_IS_NOT_VALID\");\n\n//             require(items[heroItems[1]].OWNER == owner(), \"ITEM_IS_NOT_IN_BLOCKCHAIN\");\n//             require(items[heroItems[1]].STAT_TYPE == 2, \"ITEM_TYPE_IS_NOT_VALID\");\n\n//             require(items[heroItems[2]].OWNER == owner(), \"ITEM_IS_NOT_IN_BLOCKCHAIN\");\n//             require(items[heroItems[2]].STAT_TYPE == 3, \"ITEM_TYPE_IS_NOT_VALID\");\n\n//             require(items[heroItems[3]].OWNER == owner(), \"ITEM_IS_NOT_IN_BLOCKCHAIN\");\n//             require(items[heroItems[3]].STAT_TYPE == 4, \"ITEM_TYPE_IS_NOT_VALID\");\n\n//             require(items[heroItems[4]].OWNER == owner(), \"ITEM_IS_NOT_IN_BLOCKCHAIN\");\n//             require(items[heroItems[4]].STAT_TYPE == 5, \"ITEM_TYPE_IS_NOT_VALID\");\n\n//             require(heroStats[0] > 0, \"STAT_MUST_BE_HIGHER\");\n//             require(heroStats[1] > 0, \"STAT_MUST_BE_HIGHER\");\n//             require(heroStats[2] > 0, \"STAT_MUST_BE_HIGHER\");\n//             require(heroStats[3] > 0, \"STAT_MUST_BE_HIGHER\");\n//             require(heroStats[4] > 0, \"STAT_MUST_BE_HIGHER\");\n\n//             require(v > 0, \"SIGNATURE_PARAMETER_IS_INVALID\");\n//             require(checkHeroCreationSign(id, heroStats, heroItems, v, rs), \"SIGNATURE_VALIDATION_FAILED\");\n\n//             //delete payments[id]; // delete payment hash after the hero was created in order to prevent double spend\n//             heroes[id] = Hero(msg.sender, heroStats[0], heroStats[1],  heroStats[2], heroStats[3], heroStats[4], block.number);\n//             playerHeroes[msg.sender] = id;\n\n//             items[heroItems[0]].OWNER = msg.sender;\n//             items[heroItems[1]].OWNER = msg.sender;\n//             items[heroItems[2]].OWNER = msg.sender;\n//             items[heroItems[3]].OWNER = msg.sender;\n//             items[heroItems[4]].OWNER = msg.sender;\n\n//             emit HeroCreation(msg.sender, id);\n\n//             return true;\n//     }\n\n\n//     function getHero(uint id) public view returns(address, uint, uint, uint, uint, uint, uint){\n//         return (heroes[id].OWNER, heroes[id].LEADERSHIP, heroes[id].INTELLIGENCE, heroes[id].STRENGTH, heroes[id].SPEED, heroes[id].DEFENSE, heroes[id].CREATED_TIME);\n//     }\n\n// ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// ///////////////////////////////////// ITEM STRUCT //////////////////////////////////////////////////\n\n//     struct Item{\n\n//         uint STAT_TYPE; // Item can increase only one stat of Hero, there are five: Leadership, Defense, Speed, Strength and Intelligence\n//         uint QUALITY; // Item can be in different Quality. Used in Gameplay.\n\n//         uint GENERATION; // Items are given to Players only as a reward for holding Strongholds on map, or when players create a hero.\n//                          // Items are given from a list of items batches. Item batches are putted on Blockchain at once by Game Owner.\n//                          // Each of Item batches is called as a generation.\n\n//         uint STAT_VALUE;\n//         uint LEVEL;\n//         uint XP;         // Each battle where, Item was used by Hero, increases Experience (XP). Experiences increases Level. Level increases Stat value of Item\n//         address OWNER;   // Wallet address of Item owner.\n//     }\n\n//     mapping (uint => Item) public items;\n\n//     // battle id > item id\n//     mapping (uint => uint) public updated_items;\n\n//     // creationType StrongholdReward: 0, createHero 1\n//     function putItem (\n//       uint creationType,\n//       uint id,\n//       uint statType,\n//       uint quality,\n//       uint generation,\n//       uint statValue\n//     ) public onlyOwner {\n//       require( id > 0, \"ITEM_ID_MUST_BE_HIGHER\" );\n//       require( items[id].OWNER == 0x0000000000000000000000000000000000000000, \"ITEM_IN_BLOCKCHAIN\" );\n\n//       items[id] = Item(statType, quality, generation, statValue, 0, 0, msg.sender);\n\n//       if ( creationType == STRONGHOLD_REWARD_BATCH ) {\n//         addStrongholdReward( id );     //if putItem(stronghold reward) ==> add to StrongholdReward\n//       }\n//     }\n\n//     function getItem(uint id) public view returns(uint, uint, uint, uint, uint, uint, address){\n//       return (items[id].STAT_TYPE, items[id].QUALITY, items[id].GENERATION, items[id].STAT_VALUE, items[id].LEVEL, items[id].XP, items[id].OWNER);\n//     }\n\n//     function getUpdatedItem(uint battleId) public view returns(uint) {\n//       return updated_items[battleId];\n//     }\n\n//     function isUpgradableItem(uint id) private view returns (bool){\n//       if (id == 0) return false;\n//       if (items[id].STAT_VALUE == 0) return false;\n\n//       if (items[id].QUALITY == 1 && items[id].LEVEL == 3) return false;\n//       if (items[id].QUALITY == 2 && items[id].LEVEL == 5) return false;\n//       if (items[id].QUALITY == 3 && items[id].LEVEL == 7) return false;\n//       if (items[id].QUALITY == 4 && items[id].LEVEL == 9) return false;\n//       if (items[id].QUALITY == 5 && items[id].LEVEL == 10) return false;\n\n//       return true;\n//     }\n\n//     function updateItemsStats(uint[5] itemIds, uint battleId, uint battleResult) public {\n//       uint zero = 0;\n//       uint[5] memory existedItems = [zero, zero, zero, zero, zero];\n//       uint itemIndexesAmount = zero;\n\n//       for (uint i=zero; i<itemIds.length; i++) {\n//           // Check if Exp can be increased\n//           if (isUpgradableItem(itemIds[i])) {\n\n//             existedItems[itemIndexesAmount] = itemIds[i];\n//             itemIndexesAmount++;\n//           }\n//       }\n\n//       // No Upgradable Items\n//       if (itemIndexesAmount == zero) {\n//         return;\n//       }\n\n//       uint seed = block.number + randomFromAddress(msg.sender) + getBalance();\n//       uint randomIndex = random(seed, itemIndexesAmount);\n//       randomIndex--; // It always starts from 1. While arrays start from 0\n\n//       uint id = existedItems[randomIndex];\n\n//       // Increase XP that represents on how many battles the Item was involved into\n//       if (battleResult == ATTACKER_WON)\n//         items[id].XP = items[id].XP + 2;\n//       else\n//         items[id].XP = items[id].XP + 1;\n\n//       // Increase Level\n//       if (\n//                 items[id].LEVEL == 0 && items[id].XP >= 2 ||\n//                 items[id].LEVEL == 1 && items[id].XP >= 6 ||\n//                 items[id].LEVEL == 2 && items[id].XP >= 20 ||\n//                 items[id].LEVEL == 3 && items[id].XP >= 48 ||\n//                 items[id].LEVEL == 4 && items[id].XP >= 92 ||\n//                 items[id].LEVEL == 5 && items[id].XP >= 152 ||\n//                 items[id].LEVEL == 6 && items[id].XP >= 228 ||\n//                 items[id].LEVEL == 7 && items[id].XP >= 318 ||\n//                 items[id].LEVEL == 8 && items[id].XP >= 434 ||\n//                 items[id].LEVEL == 9 && items[id].XP >= 580\n//       ) {\n//         items[id].LEVEL = items[id].LEVEL + 1;\n//         items[id].STAT_VALUE = items[id].STAT_VALUE + 1;\n//         // return \"Item level is increased by 1\";\n//       }\n\n//       updated_items[battleId] = id;\n//     }\n\n// ////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// ///////////////////////////////////// MARKET ITEM STRUCT ///////////////////////////////////////////////\n\n//     struct MarketItemData{\n\n//             uint Price; // Fixed Price of Item defined by Item owner\n//             uint Duration; // 8, 12, 24 hours\n//             uint CreatedTime; // Unix timestamp in seconds\n//             uint City; // City ID (item can be added onto the market only through cities.)\n//             address Seller; // Wallet Address of Item owner\n//             // bytes32 TX; // Transaction ID, (Transaction that has a record of Item Adding on Market)\n\n//     }\n\n//     mapping (uint => MarketItemData) market_items_data;\n\n//     function addMarketItem(uint itemId, uint price, uint duration, uint city) public payable { // START AUCTION FUNCTION\n//       require(msg.sender != owner(),                                                      \"GAME_OWNER_IS_NOT_ALLOWED_TO_PLAY_GAME\");\n//             require(items[itemId].OWNER == msg.sender,                                    \"MARKET_ITEM_MUST_BE_MANAGED_BY_OWNER\");\n//             require(price > 0,                                                            \"MARKET_ITEM_PRICE_MUST_BE_HIGHER\");\n//             require(duration == HOURS_8 || duration == HOURS_12 || duration == HOURS_24,  \"MARKET_ITEM_MUST_HAVE_VALID_DURATION\");\n//             require(hasCorrectMarketFee(duration),                                        \"MARKET_ITEM_MUST_HAVE_CORRECT_FEE\");\n//             if (market_items_data[itemId].City != 0) {\n//               bool notExpired = market_items_data[itemId].CreatedTime+market_items_data[itemId].Duration>now;\n//               if (!notExpired) {\n//                 uint cityId2 = market_items_data[itemId].City;\n//                 cities[cityId2].MarketAmount = cities[cityId2].MarketAmount - 1;\n\n//                 delete market_items_data[itemId];\n//               }\n//               else {\n//                 require(!notExpired, \"MARKET_ITEM_ALREADY_IN_BLOCKCHAIN\");\n//               }\n//             }\n//             /* require(removeMarketItemIfExpired(itemId),                                    \"MARKET_ITEM_IN_BLOCKCHAIN_AND_ITS_DURATION_DID_NOT_EXPIRED\"); */\n//             require(cities[city].MarketCap > cities[city].MarketAmount,                  \"MARKET_ITEM_MUST_CAN_NOT_BE_PUT_ON_FULL_MARKET\"); // Also Checks that city exists\n\n//             if ( options[SELLING_COFFER_PERCENTS] > 0) {\n//               uint coffer = msg.value / 100 * options[SELLING_COFFER_PERCENTS];\n//               cities[city].CofferSize = cities[city].CofferSize + coffer;\n//             }\n\n//             cities[city].MarketAmount = cities[city].MarketAmount + 1;\n\n//             market_items_data[itemId] = MarketItemData(price, duration, now, city, msg.sender);\n//     }\n\n//     // It returns false, if item duration did mpt expire\n//     /* function removeMarketItemIfExpired (uint itemId) internal returns(bool) {\n//       if (market_items_data[itemId].Cmd != 0x0000000000000000000000000000000000000000) {\n//         if (market_items_data[itemId].CreatedTime+market_items_data[itemId].Duration>=now) {\n\n//           uint cityId = market_items_data[itemId].City;\n//           cities[cityId].MarketAmount = cities[cityId].MarketAmount - 1;\n\n//             delete market_items_data[itemId];\n//         } else {\n//           return false;\n//         }\n//       }\n//       return true;\n//     } */\n\n//     function hasCorrectMarketFee(uint duration) internal view returns(bool) {\n//       if (duration == HOURS_8){\n//           return msg.value == options[HOURS_8_FEE];\n//       } else if (duration == HOURS_12){\n//           return msg.value == options[HOURS_12_FEE];\n//       } else if (duration == HOURS_24){\n//           return msg.value == options[HOURS_24_FEE];\n//       }\n//       return false;\n//     }\n// //\n//     function getMarketItem(uint itemId) public view returns(uint, uint, uint, uint, address){\n//             return(market_items_data[itemId].Price, market_items_data[itemId].Duration, market_items_data[itemId].CreatedTime, market_items_data[itemId].City, market_items_data[itemId].Seller);\n//     }\n\n//     function buyMarketItem(uint itemId) public payable returns(string) {\n//       require(msg.sender != market_items_data[itemId].Seller,                                   \"MARKET_ITEM_CAN_NOT_BE_BOUGHT_BY_SELLER\");\n//       require(msg.value == (market_items_data[itemId].Price / 100 * options[PURCHASE_PERCENTS]),   \"MARKET_ITEM_MUST_HAVE_CORRECT_ATTACHMENT\"); // check transaction amount\n//       bool notExpired = false;\n//       notExpired = market_items_data[itemId].CreatedTime+market_items_data[itemId].Duration>now;\n//       if (!notExpired) {\n//         uint cityId2 = market_items_data[itemId].City;\n//         cities[cityId2].MarketAmount = cities[cityId2].MarketAmount - 1;\n\n//         delete market_items_data[itemId];\n\n//         return(\"MARKET_ITEM_ALREADY_EXPIRED\");\n//       }\n//       /* require(removeMarketItemIfExpired(itemId),                                               \"MARKET_ITEM_DURATION_NOT_EXPIRED\"); */\n//       require(market_items_data[itemId].City != 0,   \"MARKET_ITEM_NOT_IN_BLOCKCHAIN\");\n\n//         uint cityId = market_items_data[itemId].City; // get the city id\n\n//         uint cityHero = cities[cityId].Hero;  // get the hero id\n//         address cityOwner = heroes[cityHero].OWNER; // get the hero owner\n//         address seller = market_items_data[itemId].Seller;\n\n//         cities[cityId].MarketAmount = cities[cityId].MarketAmount - 1;\n\n//         uint zero = 0;\n//         if (cityHero != zero)\n//         {\n//             uint lordFee = msg.value / options[PURCHASE_PERCENTS] * options[LORD_PERCENTS];\n//             cityOwner.transfer(lordFee); // send 10% to city owner\n//         }\n\n//         seller.transfer(market_items_data[itemId].Price); // send 100% to seller\n//         items[itemId].OWNER = msg.sender; // change owner\n//         delete market_items_data[itemId]; // delete auction\n//         return \"Was paid\";\n//     }\n//     function deleteMarketItem(uint itemId) public {\n//         require(market_items_data[itemId].Seller == msg.sender, \"MARKET_ITEM_MUST_BE_MANAGED_BY_OWNER\");\n//         cities[market_items_data[itemId].City].MarketAmount = cities[market_items_data[itemId].City].MarketAmount - 1;\n//         delete market_items_data[itemId];\n//         /* return true; */\n//     }\n\n\n// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// ///////////////////////////////////// CITY STRUCT //////////////////////////////////////////////////////////\n\n//     struct City{\n\n//         uint ID; // city ID\n//         uint Hero;  // id of the hero owner\n//         uint Size; // BIG, MEDIUM, SMALL\n//         uint CofferSize; // size of the city coffer\n//         uint CreatedBlock;\n//         uint MarketCap;\n//         uint MarketAmount;\n//     }\n\n//     uint cityAmount = 0;\n//     mapping(uint => City) public cities;\n\n//     // cap argument is market capacity\n//     function putCity(uint id, uint size, uint cofferSize, uint cap) public payable onlyOwner {\n//         require(msg.value == cofferSize, \"CITY_MUST_HAVE_CORRECT_COFFER\");\n//         require(cities[id].ID == 0, \"CITY_ALREADY_DEFINED\");\n//         require(id > 0, \"CITY_MUST_HAVE_HIGHER_ID\");\n//         cities[id] = City(id, 0, size, cofferSize, block.number, cap, 0 );\n//         cityAmount = cityAmount + 1;\n//     }\n\n//     function getCity(uint id) public view returns(uint, uint, uint, uint, uint, uint){\n//         return (cities[id].Hero, cities[id].Size, cities[id].CofferSize, cities[id].CreatedBlock, cities[id].MarketCap, cities[id].MarketAmount);\n//     }\n\n//     function getCityAmount() public view returns(uint) {\n//       return cityAmount;\n//     }\n\n//     function allCoffers() public view returns(uint){\n//         uint total = 0;\n//         for (uint i=1; i < cityAmount ; i++){\n//             total += cities[i].CofferSize;\n//         }\n//         return total;\n//     }\n\n//     uint cofferBlockNumber = block.number;\n\n//     function payCoffers() public {   // drop coffer (every 25 000 blocks) ==> 30% coffer goes to cityOwner\n//         require(block.number-cofferBlockNumber > options[COFFER_INTERVAL_BLOCKS], \"COFFER_PAYING_IS_TOO_EARLY\");\n\n//         cofferBlockNumber = block.number; // this function can be called every \"cofferBlockNumber\" blocks\n\n//         for (uint cityNumber=1; cityNumber < cityAmount ; cityNumber++){ // loop through each city\n\n//             uint cityHero = cities[cityNumber].Hero;\n\n//             if (heroes[cityHero].OWNER != 0x0000000000000000000000000000000000000000) {\n//               address heroOwner = heroes[cityHero].OWNER;\n//               uint transferValue = (cities[cityNumber].CofferSize/100)*options[COFFER_PAY_PERCENTS];\n//               cities[cityNumber].CofferSize = (cities[cityNumber].CofferSize/100)*options[COFFER_REMAINING_PERCENTS];\n//               heroOwner.transfer(transferValue);\n//             } // else it is goes to nowhere, which means will stay on contract and will be transferred NPC owner.\n//         }\n//     }\n\n//     function getCoffersBlock() public view returns(uint) {\n//       return (cofferBlockNumber);\n//     }\n\n// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// ///////////////////////////////////// STRONGHOLD STRUCT //////////////////////////////////////////////////////////\n\n//     struct Stronghold{\n//         uint ID;           // Stronghold ID\n//         uint Hero;         // Hero ID, that occupies Stronghold on map\n//         uint CreatedBlock; // The Blockchain Height\n\n//     }\n\n//     uint strongholdAmount = 0;\n//     mapping(uint => Stronghold) public strongholds;\n\n\n//     function getStronghold(uint shId) public view returns(uint, uint){\n//             return(strongholds[shId].Hero, strongholds[shId].CreatedBlock);\n//     }\n\n//     function putStronghold(uint shId) public {\n//       require(shId > 0, \"STRONGHOLD_ID_MUST_BE_HIGHER\");\n//       require(strongholds[shId].CreatedBlock == 0, \"STRONGHOLD_CAN_NOT_BE_OVERRITTEN\");\n\n//         strongholds[shId] = Stronghold(shId, 0, block.number);\n//         strongholdAmount = strongholdAmount + 1;\n//     }\n\n//     function isStrongholdOwner(uint hId) internal view returns(bool) {\n//       uint zero = 0;\n//       if (hId != zero) {\n//         for(uint i=1; i<strongholdAmount; i++) {\n//           if (strongholds[i].Hero == hId) {\n//             return true;//, \"Hero can hold only one stronghold\");\n//           }\n//         }\n//       }\n//       return false;\n//     }\n\n// /////////////////////////////////////// STRONGLOHD REWARD STRUCT /////////////////////////////////////////////////////////\n\n//     mapping (uint => uint) public stronghold_rewards_batch;\n\n//     function addStrongholdReward(uint id) public onlyOwner{\n//         stronghold_rewards_batch[id] = block.number;\n//     }\n\n// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// /////////////////////////////////////// BATTLELOG STRUCT /////////////////////////////////////////////////////////\n\n//     struct BattleLog{\n\n//         uint[2] BattleResultType; // BattleResultType[0]: 0 - Attacker WON, 1 - Attacker Lose ; BattleResultType[1]: 0 - City, 1 - Stronghold, 2 - Bandit Camp\n//         uint Attacker;\n//         uint[2] AttackerTroops;       // Attacker's troops amount that were involved in the battle & remained troops\n//         uint[5] AttackerItems;        // Item IDs that were equipped by Attacker during battle.\n//         uint DefenderObject;   // City|Stronghold|NPC ID based on battle type\n//         uint Defender;         // City Owner ID|Stronghold Owner ID or NPC ID\n//         uint[2] DefenderTroops;\n//         uint[5] DefenderItems;\n//         uint Time;             // Unix Timestamp in seconds. Time, when battle happened\n//         // bytes32 TX;                   // Transaction where Battle Log was recorded.\n//         }\n\n//     mapping(uint => BattleLog) public battle_logs;\n\n//     // result type: win or lose/ battle type\n//     // last parameter 'dropItem' is only for contest version of game\n//     function addBattleLog(\n//       uint id, // Battle ID\n//       uint[2] resultType,\n//       uint attacker, // Attacker ID\n//       uint[2] attackerTroops,\n//       uint[5] attackerItems,\n//       uint defenderObject, // Bandit Camp ID, Stronghold ID or City ID\n//       uint defender,  // Defender Lord ID\n//       uint[2] defenderTroops,\n//       uint[5] defenderItems,\n//       uint8 v, bytes32[2] rs )\n//       //, uint itemDrop*/)\n//           public payable {\n//             require(msg.sender != owner(), \"BATTLE_LOG_IS_NOT_CONSIDERING_GAME_DEVELOPER_AS_PLAYER\");\n//             require(battle_logs[id].Attacker == 0, \"BATTLE_LOG_IS_ON_BLOCKCHAIN\");\n//             /* require(resultType.length == 2, \"BATTLE_LOG_MUST_HAVE_RESULT_PARAMETER\"); */\n//             require(resultType[0] >= 1 && resultType[0] <= 2, \"BATTLE_LOG_MUST_HAVE_CORRECT_RESULT_PARAMETER\");\n//             require(resultType[1] >= 1 && resultType[1] <= 3, \"BATTLE_LOG_MUST_HAVE_CORRECT_TYPE_PARAMETER\");\n//             /* require(attackerTroops.length == 2, \"BATTLE_LOG_MUST_HAVE_ATTACKER_TROOPS_PARAMETER\"); */\n//             /* require(attackerItems.length == 5, \"BATTLE_LOG_MUST_HAVE_ATTACKER_ITEMS_LIST_PARAMETER\"); */\n//             /* require(defenderTroops.length == 2, \"BATTLE_LOG_MUST_HAVE_DEFENDER_TROOPS_PARAMETER\"); */\n//             /* require(defenderItems.length ==5, \"BATTLE_LOG_MUST_HAVE_DEFENDER_ITEMS_LIST_PARAMETER\"); */\n//             require(hasCorrectBattleFeeAndNotStrongholdOwner(resultType[1], attacker), \"BATTLE_LOG_MUST_HAVE_CORRECT_FEE_OR_LORD_IS_STRONGHOLD_OWNER\");\n//             require(checkBattleLogSign(id, resultType, attacker, attackerTroops,attackerItems,defenderObject, defender,defenderTroops,defenderItems, v, rs), \"SIGNATURE_VALIDATION_FAILED\");\n\n//             battle_logs[id] = BattleLog(resultType, attacker, attackerTroops,\n//                                         attackerItems, defenderObject, defender,\n//                                         defenderTroops, defenderItems, now); //add data to the struct\n\n//             uint zero = 0;\n\n//             if (resultType[0] == ATTACKER_WON && resultType[1] == PVP){\n//                 strongholds[defenderObject].Hero = attacker; // if attack Stronghold && WIN ==> change stronghold Owner\n//                 strongholds[defenderObject].CreatedBlock = block.number;\n//             } else if (resultType[1] == PVC) {\n//               if (options[PVC_FEE] != zero && options[PVC_COFFER_PERCENTS] != zero ) {\n//                 cities[defenderObject].CofferSize = cities[defenderObject].CofferSize + (options[PVC_FEE] / 100 * options[PVC_COFFER_PERCENTS]);\n//               }\n//               if (resultType[0] == ATTACKER_WON) {\n//                 cities[defenderObject].Hero = attacker; // else if attack City && WIN ==> change city owner\n//                 cities[defenderObject].CreatedBlock = block.number;\n//               }\n//             } else if (resultType[1] == PVE){\n//                 updateItemsStats(attackerItems, id, resultType[0]);     // else if attackBandit ==> update item stats\n//             }\n//     }\n\n//     function hasCorrectBattleFeeAndNotStrongholdOwner(uint battleType, uint attacker) internal view returns(bool) {\n//       if (battleType == PVC){ // options[PVC_FEE] if atack City\n//           return (msg.value == options[PVC_FEE]);\n//       } else if (battleType == PVP){ // options[PVP_FEE] if atack Stronghold\n//           if (msg.value == options[PVP_FEE]) {\n//             return !isStrongholdOwner(attacker);\n//           }\n//       } else if (battleType == PVE){ // options[PVE_FEE] if atack Bandit Camp\n//           return (msg.value == options[PVE_FEE]);\n//       }\n\n//       return false;\n//     }\n\n\n// ////////////////////////////////////////// DROP DATA STRUCT ///////////////////////////////////////////////////\n\n//     struct DropData{       // Information of Item that player can get as a reward.\n//         uint Block;        // Blockchain Height, in which player got Item as a reward\n//         uint StrongholdId; // Stronghold on the map, for which player got Item\n//         uint ItemId;       // Item id that was given as a reward\n//         uint HeroId;\n//         uint PreviousBlock;\n//     }\n\n//     uint blockNumber = block.number;\n\n//     mapping(uint => DropData) public stronghold_reward_logs;\n\n//     function getDropItemBlock() public view returns(uint) {\n//       return (blockNumber);\n//     }\n\n//     function straightDropItems(uint itemId) internal returns (string) {\n//       require(strongholdAmount > 0, \"How can you drop Items. Initialize Strongholds first\");\n//       uint zero = 0;\n\n//       //uint seed = block.number + item.GENERATION+item.LEVEL+item.STAT_VALUE+item.XP + itemIds.length + randomFromAddress(item.OWNER); // my poor attempt to make the random generation a little bit more random\n//       // Update Block\n//       uint previousBlock = blockNumber;\n//       blockNumber = block.number; // this function can be called every \"blockDistance\" blocks\n\n//       uint seed = block.number + randomFromAddress(msg.sender) + getBalance();\n\n//       uint id = random(seed, strongholdAmount);\n\n//       uint lordId = strongholds[id].Hero;\n\n//       delete stronghold_rewards_batch[itemId]; //delete item from strongHold reward struct\n//       strongholds[id].CreatedBlock = block.number;\n\n//       // Stronghold is occupied by NPC\n//       if (lordId == zero) {\n//         delete items[itemId];\n//         return(strConcat(uint2str(id), \"\", \"\", \" index numbered stornghold lord is NPC. Should be given item for drop with id: \", uint2str(itemId) ) );\n//       }\n\n//       items[itemId].OWNER = heroes[lordId].OWNER;\n\n//       // Kick out from Stronghold\n//       strongholds[id].Hero = zero;\n\n//       stronghold_reward_logs[blockNumber] = DropData(blockNumber, id, itemId, lordId, previousBlock); //add data to the struct\n\n//       // return (\"Supreme success\");\n//       return(strConcat(uint2str(id), \"\", \"\", \"is generated id for drop id: \", uint2str(itemId) ) ); // check if hero exist\n//     }\n\n\n//     function dropItems(uint itemId) public onlyOwner returns(string) {\n//         require(stronghold_rewards_batch[itemId] > 0, \"STRONGHOLD_REWARD_BATCH_MUST_HAVE_ITEM\");\n//         require(block.number-blockNumber > options[ITEM_DROP_INTERVAL_BLOCKS], \"STRONGHOLD_REWARD_TIME_IS_TOO_EARLY\");\n//         return straightDropItems(itemId);\n//     }\n\n//     // Pass 0 as an Argument to retreive block for latest one\n//     function getDropData(uint blockAsKey) public view returns(uint, uint, uint, uint) {\n//         if (blockAsKey == 0)\n//             blockAsKey = blockNumber;\n//         return ( stronghold_reward_logs[blockAsKey].StrongholdId, stronghold_reward_logs[blockAsKey].ItemId,\n//             stronghold_reward_logs[blockAsKey].HeroId, stronghold_reward_logs[blockAsKey].PreviousBlock  );\n//     }\n\n//     function uint2str(uint i) internal pure returns (string){\n//         if (i == 0) return \"0\";\n//         uint j = i;\n//         uint length;\n//         while (j != 0){\n//             length++;\n//             j /= 10;\n//         }\n//         bytes memory bstr = new bytes(length);\n//         uint k = length - 1;\n//         while (i != 0){\n//             bstr[k--] = byte(48 + i % 10);\n//             i /= 10;\n//         }\n//         return string(bstr);\n//     }\n\n//     function strConcat(string a, string b, string c, string d, string e) internal pure returns (string) {\n\n//       return string(abi.encodePacked(a, b, c, d, e));\n\n//   }\n\n// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// // Signnature Testing\n// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//     address deployer = msg.sender;\n\n//     /* uint id, uint referer_id, address referer_address, uint[5] heroStats, uint[5] heroItems */\n\n//     function prefixedHeroMessage(uint id, uint[] heroStats, uint[] heroItems) internal pure returns (bytes32) {\n//         return keccak256(abi.encodePacked('\\x19TRON Signed Message:\\n32', id,\n//           heroStats, heroItems));\n//     }\n\n//     function checkHeroCreationSign(uint id, uint[] heroStats, uint[] heroItems, uint8 v, bytes32[2] rs) public view returns(bool) {\n//       bytes32 message = prefixedHeroMessage(id, heroStats, heroItems);\n\n//       return ecrecover(message, v, rs[0], rs[1]) == deployer;\n//     }\n\n//     function prefixedBattleLogMessage(uint id, // Battle ID\n//       uint[2] resultType,\n//       uint attacker, // Attacker ID\n//       uint[2] attackerTroops,\n//       uint[5] attackerItems,\n//       uint defenderObject, // Bandit Camp ID, Stronghold ID or City ID\n//       uint defender,  // Defender Lord ID\n//       uint[2] defenderTroops,\n//       uint[5] defenderItems) internal pure returns (bytes32) {\n//         return keccak256(abi.encodePacked('\\x19TRON Signed Message:\\n32', id, resultType, attacker, attackerTroops, attackerItems, defenderObject, defender, defenderTroops, defenderItems));\n//     }\n\n//     function checkBattleLogSign(uint id, // Battle ID\n//       uint[2] resultType,\n//       uint attacker, // Attacker ID\n//       uint[2] attackerTroops,\n//       uint[5] attackerItems,\n//       uint defenderObject, // Bandit Camp ID, Stronghold ID or City ID\n//       uint defender,  // Defender Lord ID\n//       uint[2] defenderTroops,\n//       uint[5] defenderItems,\n//       uint8 v, bytes32[2] rs) public view returns(bool) {\n//       bytes32 message = prefixedBattleLogMessage(id, resultType, attacker, attackerTroops, attackerItems, defenderObject, defender, defenderTroops, defenderItems);\n\n//       return ecrecover(message, v, rs[0], rs[1]) == deployer;\n//     }\n\n//     //function checkSign(bytes32 message, bytes sig) public view returns(string) {\n//     function checkSign(string str1, string str2, uint8 v, bytes32 r, bytes32 s) public view returns(string) {\n\n//         // This recreates the message that was signed on the client.\n//         bytes32 message = prefixed(str1, str2);\n\n//         /* require(recoverSigner(message, sig) == deployer, \"Message is not verified\"); */\n//         require(ecrecover(message, v, r, s) == deployer, \" Message was not verified!\");\n\n\n//         // msg.sender.transfer(amount);\n//         return \"Message was done!\";\n\n//     }\n\n//     function checkArrSign(uint[] arr, uint8 v, bytes32 r, bytes32 s) public view returns(string) {\n\n//         // This recreates the message that was signed on the client.\n//         bytes32 message = prefixedArr(arr);\n\n//         /* require(recoverSigner(message, sig) == deployer, \"Message is not verified\"); */\n//         require(ecrecover(message, v, r, s) == deployer, \" Message was not verified!\");\n\n\n//         // msg.sender.transfer(amount);\n//         return \"Array has been verified!\";\n\n//     }\n\n\n//         // Builds a prefixed hash to mimic the behavior of eth_sign.\n//         function prefixed(string str1, string str2) internal pure returns (bytes32) {\n//             return keccak256(abi.encodePacked('\\x19TRON Signed Message:\\n32', str1, str2));\n//         }\n\n//         function prefixedArr(uint[] arr) internal pure returns (bytes32) {\n//             return keccak256(abi.encodePacked('\\x19TRON Signed Message:\\n32', arr));\n//         }\n\n//     // Destroy contract and reclaim leftover funds.\n//     function kill() public {\n//         require(msg.sender == deployer);\n//         selfdestruct(msg.sender);\n//     }\n\n\n    // Signature methods\n\n    /* function splitSignature(bytes sig)\n        internal\n        pure\n        returns (uint8, bytes32, bytes32)\n    {\n        require(sig.length == 65, \"Signnature length is invalid\");\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        assembly {\n            // first 32 bytes, after the length prefix\n            r := mload(add(sig, 32))\n            // second 32 bytes\n            s := mload(add(sig, 64))\n            // final byte (first byte of the next 32 bytes)\n            v := and(mload(add(sig, 65)), 255)\n        }\n\n        return (v, r, s);\n    } */\n\n    /* function recoverSigner(bytes32 message, bytes sig)\n        internal\n        pure\n        returns (address)\n    {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n\n        (v, r, s) = splitSignature(sig);\n\n        return ecrecover(message, v, r, s);\n    } */\n\n\n}\n",
  "sourcePath": "/home/x332/Projects/blocklords/blocklords-loom/contracts/Blocklords.sol",
  "ast": {
    "absolutePath": "/home/x332/Projects/blocklords/blocklords-loom/contracts/Blocklords.sol",
    "exportedSymbols": {
      "Blocklords": [
        80
      ]
    },
    "id": 81,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".23"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:0"
      },
      {
        "absolutePath": "/home/x332/Projects/blocklords/blocklords-loom/contracts/Ownable.sol",
        "file": "./Ownable.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 81,
        "sourceUnit": 247,
        "src": "26:23:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 246,
              "src": "74:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$246",
                "typeString": "contract Ownable"
              }
            },
            "id": 4,
            "nodeType": "InheritanceSpecifier",
            "src": "74:7:0"
          }
        ],
        "contractDependencies": [
          246
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 80,
        "linearizedBaseContracts": [
          80,
          246
        ],
        "name": "Blocklords",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 7,
            "name": "HOURS_8",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "212:35:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 5,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "212:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3238383030",
              "id": 6,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "242:5:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_28800_by_1",
                "typeString": "int_const 28800"
              },
              "value": "28800"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 10,
            "name": "HOURS_12",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "286:35:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 8,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "286:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3433323030",
              "id": 9,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "316:5:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_43200_by_1",
                "typeString": "int_const 43200"
              },
              "value": "43200"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 13,
            "name": "HOURS_24",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "360:35:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 11,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "360:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3836343030",
              "id": 12,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "390:5:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_86400_by_1",
                "typeString": "int_const 86400"
              },
              "value": "86400"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 16,
            "name": "ATTACKER_WON",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "455:31:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 14,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "455:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "31",
              "id": 15,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "485:1:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 19,
            "name": "ATTACKER_LOSE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "490:31:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 17,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "490:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "32",
              "id": 18,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "520:1:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_2_by_1",
                "typeString": "int_const 2"
              },
              "value": "2"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 22,
            "name": "PVP",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "544:20:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 20,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "544:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "31",
              "id": 21,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "563:1:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 25,
            "name": "PVC",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "618:20:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 23,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "618:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "32",
              "id": 24,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "637:1:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_2_by_1",
                "typeString": "int_const 2"
              },
              "value": "2"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 28,
            "name": "PVE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "671:20:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 26,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "671:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "33",
              "id": 27,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "690:1:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_3_by_1",
                "typeString": "int_const 3"
              },
              "value": "3"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 31,
            "name": "HERO_CREATION_FEE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "758:63:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 29,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "758:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "4845524f5f4352454154494f4e5f464545",
              "id": 30,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "802:19:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_a3ada2555bb9ed3bfd093e0602fa98ab0b5acd462fe83e7f4e032a233742ac91",
                "typeString": "literal_string \"HERO_CREATION_FEE\""
              },
              "value": "HERO_CREATION_FEE"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 34,
            "name": "REFERAL_FEE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "870:57:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 32,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "870:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "5245464552414c5f464545",
              "id": 33,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "914:13:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_a3136c6ae290bee308aa883e4e01ee56b52c4d68bedb01f48537c28118b61672",
                "typeString": "literal_string \"REFERAL_FEE\""
              },
              "value": "REFERAL_FEE"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 37,
            "name": "HOURS_8_FEE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "946:57:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 35,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "946:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "484f5552535f385f464545",
              "id": 36,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "990:13:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_5cce7cdf14ed2df3cdfaa1ac4c527c53edb1daebda4c268ff933f3927249621d",
                "typeString": "literal_string \"HOURS_8_FEE\""
              },
              "value": "HOURS_8_FEE"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 40,
            "name": "HOURS_12_FEE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1023:58:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 38,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1023:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "484f5552535f31325f464545",
              "id": 39,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1067:14:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_002e29fe043a16fd3ed8f9a25fb9d5bf615b8bbd957362711224c1256a8e953d",
                "typeString": "literal_string \"HOURS_12_FEE\""
              },
              "value": "HOURS_12_FEE"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 43,
            "name": "HOURS_24_FEE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1100:58:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 41,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1100:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "484f5552535f32345f464545",
              "id": 42,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1144:14:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_bf55d4ff8a0c68f962100fa5d529cb604e33fb4462b0044a5a2e68d8071bc662",
                "typeString": "literal_string \"HOURS_24_FEE\""
              },
              "value": "HOURS_24_FEE"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 46,
            "name": "PVC_FEE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1176:53:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 44,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1176:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "5056435f464545",
              "id": 45,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1220:9:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_8879a0cc549408fd09c19fbb75e9dd266b4963904864f407b0fd270b3c8f1210",
                "typeString": "literal_string \"PVC_FEE\""
              },
              "value": "PVC_FEE"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 49,
            "name": "PVE_FEE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1248:53:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 47,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1248:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "5056455f464545",
              "id": 48,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1292:9:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_4bb6263ee7c2b26f856e47d404349cd2f4f40ba04754a46b89f9f1b9d88f241b",
                "typeString": "literal_string \"PVE_FEE\""
              },
              "value": "PVE_FEE"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 52,
            "name": "PVP_FEE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1319:53:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 50,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1319:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "5056505f464545",
              "id": 51,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1363:9:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_ddc8553b7a9e0c51e6000b3c3b678ac9fba36d7a6aa76ab1a50746d09050e413",
                "typeString": "literal_string \"PVP_FEE\""
              },
              "value": "PVP_FEE"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 55,
            "name": "PURCHASE_PERCENTS",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1391:63:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 53,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1391:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "50555243484153455f50455243454e5453",
              "id": 54,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1435:19:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_cbb1a14f682aa04a62c4ca57974d61765b4f5d66092257159b10c321eb34cb1a",
                "typeString": "literal_string \"PURCHASE_PERCENTS\""
              },
              "value": "PURCHASE_PERCENTS"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 58,
            "name": "LORD_PERCENTS",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1467:59:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 56,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1467:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "4c4f52445f50455243454e5453",
              "id": 57,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1511:15:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_8649927fc54307c70746dfc6ae7542b0a10432be2ac48ee419ca95be896c7db4",
                "typeString": "literal_string \"LORD_PERCENTS\""
              },
              "value": "LORD_PERCENTS"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 61,
            "name": "SELLING_COFFER_PERCENTS",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1538:69:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 59,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1538:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "53454c4c494e475f434f464645525f50455243454e5453",
              "id": 60,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1582:25:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_8271e0c2906fdc45e5c7cc8b317e71b4270687acd54616ad3a058cf29119c5ee",
                "typeString": "literal_string \"SELLING_COFFER_PERCENTS\""
              },
              "value": "SELLING_COFFER_PERCENTS"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 64,
            "name": "PVC_COFFER_PERCENTS",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1618:65:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 62,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1618:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "5056435f434f464645525f50455243454e5453",
              "id": 63,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1662:21:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_2b2fb8c2903bfdaf5d9547d9ecf30df066ef6c2f8eb8bcd7d2866b77120b4bbf",
                "typeString": "literal_string \"PVC_COFFER_PERCENTS\""
              },
              "value": "PVC_COFFER_PERCENTS"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 67,
            "name": "COFFER_PAY_PERCENTS",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1694:65:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 65,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1694:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "434f464645525f5041595f50455243454e5453",
              "id": 66,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1738:21:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_37d66d28578ed662bec69af6d5f84e04e897aab2c75a0cebfc2a319c40138a26",
                "typeString": "literal_string \"COFFER_PAY_PERCENTS\""
              },
              "value": "COFFER_PAY_PERCENTS"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 70,
            "name": "COFFER_REMAINING_PERCENTS",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1770:71:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 68,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1770:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "434f464645525f52454d41494e494e475f50455243454e5453",
              "id": 69,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1814:27:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_56fe77f4c7eccadc2856813281cea1a1b1b89a33d715cf3354755c19c7c55659",
                "typeString": "literal_string \"COFFER_REMAINING_PERCENTS\""
              },
              "value": "COFFER_REMAINING_PERCENTS"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 73,
            "name": "COFFER_INTERVAL_BLOCKS",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1853:69:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 71,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1853:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "434f464645525f494e54455256414c5f424c4f434b53",
              "id": 72,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1898:24:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_497190701cdf33fe56585179ffe8bebe5eb45790fe87c2af9fda8510a831056f",
                "typeString": "literal_string \"COFFER_INTERVAL_BLOCKS\""
              },
              "value": "COFFER_INTERVAL_BLOCKS"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 76,
            "name": "ITEM_DROP_INTERVAL_BLOCKS",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1938:71:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 74,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1938:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "4954454d5f44524f505f494e54455256414c5f424c4f434b53",
              "id": 75,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1982:27:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_2e9cbc4568f460f92b1a48c2e0d28b88e3562e3cb900ad020ddf0aae6b4c06fc",
                "typeString": "literal_string \"ITEM_DROP_INTERVAL_BLOCKS\""
              },
              "value": "ITEM_DROP_INTERVAL_BLOCKS"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 79,
            "name": "STRONGHOLD_REWARD_BATCH",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "2042:41:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 77,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "2042:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "30",
              "id": 78,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2082:1:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "internal"
          }
        ],
        "scope": 81,
        "src": "51:38090:0"
      }
    ],
    "src": "0:38142:0"
  },
  "legacyAST": {
    "absolutePath": "/home/x332/Projects/blocklords/blocklords-loom/contracts/Blocklords.sol",
    "exportedSymbols": {
      "Blocklords": [
        80
      ]
    },
    "id": 81,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".23"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:0"
      },
      {
        "absolutePath": "/home/x332/Projects/blocklords/blocklords-loom/contracts/Ownable.sol",
        "file": "./Ownable.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 81,
        "sourceUnit": 247,
        "src": "26:23:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 246,
              "src": "74:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$246",
                "typeString": "contract Ownable"
              }
            },
            "id": 4,
            "nodeType": "InheritanceSpecifier",
            "src": "74:7:0"
          }
        ],
        "contractDependencies": [
          246
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 80,
        "linearizedBaseContracts": [
          80,
          246
        ],
        "name": "Blocklords",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 7,
            "name": "HOURS_8",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "212:35:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 5,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "212:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3238383030",
              "id": 6,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "242:5:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_28800_by_1",
                "typeString": "int_const 28800"
              },
              "value": "28800"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 10,
            "name": "HOURS_12",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "286:35:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 8,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "286:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3433323030",
              "id": 9,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "316:5:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_43200_by_1",
                "typeString": "int_const 43200"
              },
              "value": "43200"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 13,
            "name": "HOURS_24",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "360:35:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 11,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "360:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3836343030",
              "id": 12,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "390:5:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_86400_by_1",
                "typeString": "int_const 86400"
              },
              "value": "86400"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 16,
            "name": "ATTACKER_WON",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "455:31:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 14,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "455:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "31",
              "id": 15,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "485:1:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 19,
            "name": "ATTACKER_LOSE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "490:31:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 17,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "490:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "32",
              "id": 18,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "520:1:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_2_by_1",
                "typeString": "int_const 2"
              },
              "value": "2"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 22,
            "name": "PVP",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "544:20:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 20,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "544:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "31",
              "id": 21,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "563:1:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 25,
            "name": "PVC",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "618:20:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 23,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "618:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "32",
              "id": 24,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "637:1:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_2_by_1",
                "typeString": "int_const 2"
              },
              "value": "2"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 28,
            "name": "PVE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "671:20:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 26,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "671:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "33",
              "id": 27,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "690:1:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_3_by_1",
                "typeString": "int_const 3"
              },
              "value": "3"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 31,
            "name": "HERO_CREATION_FEE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "758:63:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 29,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "758:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "4845524f5f4352454154494f4e5f464545",
              "id": 30,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "802:19:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_a3ada2555bb9ed3bfd093e0602fa98ab0b5acd462fe83e7f4e032a233742ac91",
                "typeString": "literal_string \"HERO_CREATION_FEE\""
              },
              "value": "HERO_CREATION_FEE"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 34,
            "name": "REFERAL_FEE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "870:57:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 32,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "870:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "5245464552414c5f464545",
              "id": 33,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "914:13:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_a3136c6ae290bee308aa883e4e01ee56b52c4d68bedb01f48537c28118b61672",
                "typeString": "literal_string \"REFERAL_FEE\""
              },
              "value": "REFERAL_FEE"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 37,
            "name": "HOURS_8_FEE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "946:57:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 35,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "946:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "484f5552535f385f464545",
              "id": 36,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "990:13:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_5cce7cdf14ed2df3cdfaa1ac4c527c53edb1daebda4c268ff933f3927249621d",
                "typeString": "literal_string \"HOURS_8_FEE\""
              },
              "value": "HOURS_8_FEE"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 40,
            "name": "HOURS_12_FEE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1023:58:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 38,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1023:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "484f5552535f31325f464545",
              "id": 39,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1067:14:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_002e29fe043a16fd3ed8f9a25fb9d5bf615b8bbd957362711224c1256a8e953d",
                "typeString": "literal_string \"HOURS_12_FEE\""
              },
              "value": "HOURS_12_FEE"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 43,
            "name": "HOURS_24_FEE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1100:58:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 41,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1100:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "484f5552535f32345f464545",
              "id": 42,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1144:14:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_bf55d4ff8a0c68f962100fa5d529cb604e33fb4462b0044a5a2e68d8071bc662",
                "typeString": "literal_string \"HOURS_24_FEE\""
              },
              "value": "HOURS_24_FEE"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 46,
            "name": "PVC_FEE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1176:53:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 44,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1176:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "5056435f464545",
              "id": 45,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1220:9:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_8879a0cc549408fd09c19fbb75e9dd266b4963904864f407b0fd270b3c8f1210",
                "typeString": "literal_string \"PVC_FEE\""
              },
              "value": "PVC_FEE"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 49,
            "name": "PVE_FEE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1248:53:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 47,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1248:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "5056455f464545",
              "id": 48,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1292:9:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_4bb6263ee7c2b26f856e47d404349cd2f4f40ba04754a46b89f9f1b9d88f241b",
                "typeString": "literal_string \"PVE_FEE\""
              },
              "value": "PVE_FEE"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 52,
            "name": "PVP_FEE",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1319:53:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 50,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1319:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "5056505f464545",
              "id": 51,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1363:9:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_ddc8553b7a9e0c51e6000b3c3b678ac9fba36d7a6aa76ab1a50746d09050e413",
                "typeString": "literal_string \"PVP_FEE\""
              },
              "value": "PVP_FEE"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 55,
            "name": "PURCHASE_PERCENTS",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1391:63:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 53,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1391:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "50555243484153455f50455243454e5453",
              "id": 54,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1435:19:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_cbb1a14f682aa04a62c4ca57974d61765b4f5d66092257159b10c321eb34cb1a",
                "typeString": "literal_string \"PURCHASE_PERCENTS\""
              },
              "value": "PURCHASE_PERCENTS"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 58,
            "name": "LORD_PERCENTS",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1467:59:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 56,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1467:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "4c4f52445f50455243454e5453",
              "id": 57,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1511:15:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_8649927fc54307c70746dfc6ae7542b0a10432be2ac48ee419ca95be896c7db4",
                "typeString": "literal_string \"LORD_PERCENTS\""
              },
              "value": "LORD_PERCENTS"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 61,
            "name": "SELLING_COFFER_PERCENTS",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1538:69:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 59,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1538:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "53454c4c494e475f434f464645525f50455243454e5453",
              "id": 60,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1582:25:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_8271e0c2906fdc45e5c7cc8b317e71b4270687acd54616ad3a058cf29119c5ee",
                "typeString": "literal_string \"SELLING_COFFER_PERCENTS\""
              },
              "value": "SELLING_COFFER_PERCENTS"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 64,
            "name": "PVC_COFFER_PERCENTS",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1618:65:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 62,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1618:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "5056435f434f464645525f50455243454e5453",
              "id": 63,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1662:21:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_2b2fb8c2903bfdaf5d9547d9ecf30df066ef6c2f8eb8bcd7d2866b77120b4bbf",
                "typeString": "literal_string \"PVC_COFFER_PERCENTS\""
              },
              "value": "PVC_COFFER_PERCENTS"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 67,
            "name": "COFFER_PAY_PERCENTS",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1694:65:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 65,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1694:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "434f464645525f5041595f50455243454e5453",
              "id": 66,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1738:21:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_37d66d28578ed662bec69af6d5f84e04e897aab2c75a0cebfc2a319c40138a26",
                "typeString": "literal_string \"COFFER_PAY_PERCENTS\""
              },
              "value": "COFFER_PAY_PERCENTS"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 70,
            "name": "COFFER_REMAINING_PERCENTS",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1770:71:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 68,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1770:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "434f464645525f52454d41494e494e475f50455243454e5453",
              "id": 69,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1814:27:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_56fe77f4c7eccadc2856813281cea1a1b1b89a33d715cf3354755c19c7c55659",
                "typeString": "literal_string \"COFFER_REMAINING_PERCENTS\""
              },
              "value": "COFFER_REMAINING_PERCENTS"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 73,
            "name": "COFFER_INTERVAL_BLOCKS",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1853:69:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 71,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1853:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "434f464645525f494e54455256414c5f424c4f434b53",
              "id": 72,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1898:24:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_497190701cdf33fe56585179ffe8bebe5eb45790fe87c2af9fda8510a831056f",
                "typeString": "literal_string \"COFFER_INTERVAL_BLOCKS\""
              },
              "value": "COFFER_INTERVAL_BLOCKS"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 76,
            "name": "ITEM_DROP_INTERVAL_BLOCKS",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "1938:71:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory",
              "typeString": "string"
            },
            "typeName": {
              "id": 74,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1938:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "4954454d5f44524f505f494e54455256414c5f424c4f434b53",
              "id": 75,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1982:27:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_2e9cbc4568f460f92b1a48c2e0d28b88e3562e3cb900ad020ddf0aae6b4c06fc",
                "typeString": "literal_string \"ITEM_DROP_INTERVAL_BLOCKS\""
              },
              "value": "ITEM_DROP_INTERVAL_BLOCKS"
            },
            "visibility": "internal"
          },
          {
            "constant": true,
            "id": 79,
            "name": "STRONGHOLD_REWARD_BATCH",
            "nodeType": "VariableDeclaration",
            "scope": 80,
            "src": "2042:41:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 77,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "2042:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "30",
              "id": 78,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "2082:1:0",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "visibility": "internal"
          }
        ],
        "scope": 81,
        "src": "51:38090:0"
      }
    ],
    "src": "0:38142:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {
    "9545242630824": {
      "events": {},
      "links": {},
      "address": "0x3082cD66E89FcaC2537a1Ba33E1291292Dd46CD3",
      "transactionHash": "0x293ab8291ad5922bc31eb7770065876d5c19cf96e58ddca72635268d080ff707"
    }
  },
  "schemaVersion": "3.0.1",
  "updatedAt": "2019-06-07T06:39:35.536Z",
  "devdoc": {
    "methods": {
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    }
  }
}